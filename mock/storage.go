// Code generated by MockGen. DO NOT EDIT.
// Source: memory_storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	model "github.com/Drynok/tx-parser/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddTransaction mocks base method.
func (m *MockStorage) AddTransaction(address string, tx model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", address, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockStorageMockRecorder) AddTransaction(address, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockStorage)(nil).AddTransaction), address, tx)
}

// IsSubscribed mocks base method.
func (m *MockStorage) IsSubscribed(address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubscribed", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSubscribed indicates an expected call of IsSubscribed.
func (mr *MockStorageMockRecorder) IsSubscribed(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubscribed", reflect.TypeOf((*MockStorage)(nil).IsSubscribed), address)
}

// Subscribe mocks base method.
func (m *MockStorage) Subscribe(address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockStorageMockRecorder) Subscribe(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockStorage)(nil).Subscribe), address)
}

// Transactions mocks base method.
func (m *MockStorage) Transactions(address string) []model.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transactions", address)
	ret0, _ := ret[0].([]model.Transaction)
	return ret0
}

// Transactions indicates an expected call of Transactions.
func (mr *MockStorageMockRecorder) Transactions(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transactions", reflect.TypeOf((*MockStorage)(nil).Transactions), address)
}
